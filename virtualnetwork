#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pyrser
import sys
import cmd
import os
import glob
import docopt
import ipaddress
from functools import wraps
from network import *

VERSION = "0.2.0a"
PRGM = os.path.basename(__file__)

def docopt_cmd(func):
    @wraps(func)
    def wrapper(self, args):
        try:
            opts = docopt.docopt(func.__doc__, args)
        except docopt.DocoptExit as e:
            print(e, file=sys.stderr)
            return
        except SystemExit:
            return
        return func(self, opts)
    return wrapper

class NetworkShell(cmd.Cmd):
    prompt = 'network> '

    def __init__(self, network):
        cmd.Cmd.__init__(self)
        self._map = network

    def cmdloop(self, intro=None):
        if intro is None:
            print(__doc__)
        try:
            cmd.Cmd.cmdloop(self, intro="")
            self.postloop()
        except KeyboardInterrupt:
            print("^C", end="")
            self.cmdloop(intro)

    @docopt_cmd
    def do_ping(self, args):
        """Try to connect two differents host, display route used. On success, return TTL.

USAGE:
  ping <host1> <host2>

OPTIONS:
  -h --help     Show this help."""
        if self._map is None:
            print("No network map loaded yet", file = sys.stderr)
            return False
        def checkhost(host):
            if host not in self._map:
                try:
                    ipaddress.ip_address(host)
                    return [v for _,v in self._map.items() if v._canConnect__(host.split('.'), 32)]
                except ValueError:
                    return []
            return [self._map[host]]
        hz = []
        for host in args.values():
            namedhost = checkhost(host)
            if not namedhost:
                print("{0}: Unknown host".format(host), file=sys.stderr)
                return False
            if len(namedhost) > 1:
                print("{0}: Ambigous (matches {1})".format(host, ', '.join(x._name for x in namedhost)),
                      file=sys.stderr)
                return False
            hz.append(namedhost[0])
        ret, ttl = hz[0].canConnect(hz[1])
        if not ret:
            print("Unable to etablish connection\nPacket dropped...")
        else:
            print("Success -- TTL = {}".format(ttl))

    def complete_ping(self, text, line, start_index, end_index):
        if text:
            return [host for host in list(self._map.keys()) if host.startswith(text)]
        else:
            return list(self._map.keys())

    @docopt_cmd
    def do_hosts(self, args):
        """Show all hosts on the network, including routes.
When providing argument, only display information for requested host.

USAGE:
  hosts [<host>...]

OPTIONS:
  -h --help     Show this help."""
        if self._map is None:
            print("No network map loaded yet", file=sys.stderr)
            return False
        if not args['<host>']:
            print('\n'.join(v.showRoutes() for v in self._map.values()), end='')
            return False
        if not all(x in self._map for x in args['<host>']):
            print("Unknown host", file=sys.stderr)
            return False
        print('\n'.join(self._map[x].showRoutes() for x in args['<host>']), end='')

    complete_hosts = complete_ping

    @docopt_cmd
    def do_loadfile(self, args):
        """Load a new config file.

USAGE:
  loadfile <file>

OPTIONS:
  -h --help     Show this help."""
        ret = get_networkmap(args['<file>'])
        if ret is None:
            return False
        self._map = ret

    def complete_loadfile(self, text, line, startidx, endidx):
        arg = line.split()[1:]
        if not arg:
            arg = ''
            line = ''
        else:
            arg = arg[-1]
        completion = [x[len(arg) - len(text):] for x in [x if not os.path.isdir(x) else (x + os.path.sep) for x in glob.glob(arg + '*')]]
        return completion

    def do_bye(self, args):
        """Quit the program"""
        print("Exit")
        return True
    do_exit = do_bye
    do_quit = do_bye
    do_EOF = do_bye

    def emptyline(self):
        pass

    def default(self, line):
        print("{0}: command not found".format(line), file=sys.stderr)


def get_networkmap(s):
    if s is None:
        return None
    try:
        return MapParser().parse_file(s).network
    except Exception as inst:
        print("Unable to load network map".format(inst), file=sys.stderr)
        return None

__doc__ = """{prgm} {ver}
A network comprehension tool.

USAGE:
  {prgm} [<file>]

Type help or ? to list commands.

OPTIONS:
  -h --help               Show this help and exit.

NOTES:
  - This tool currently doesn't check if either Network address or subnet broadcast address is taken. Remember to check it manually.
  - This tool also currently doesn't handle "Internet". If you want to add an Internet routing, add a router with hostname "Internet",
    give it the same ip as the router, set default route to the router and the ttl to 255.
    Be aware that the returning TTL will be a maximum value, if the packet isn't lost.
  - The author of this tool won't be responsible for misuses of it.
  - The code of this tool is currently open source. If you experiment issues, feel free to report or improve it.

AUTHOR:
  Original program by Arzaroth <lekva@arzaroth.com>
""".format(prgm = PRGM, ver = VERSION)

if __name__ == '__main__':
    args = docopt.docopt(__doc__)
    NetworkShell(get_networkmap(args['<file>'])).cmdloop()
